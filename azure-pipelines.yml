# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript -v $PWD:/opt

trigger:
- master
- develop

pool:
  vmImage: 'Ubuntu-16.04'
variables:
    azureSubscriptionEndpoint: retroazure
    azureContainerRegistry: bkcontainer.azurecr.io
steps:
- task: Gradle@2
  inputs:
    gradleWrapperFile: 'gradlew'
    workingDirectory: $(Build.SourcesDirectory)/api/
    #options: # Optional
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml' # Required when publishJUnitResults == True
#    testRunTitle: # Optional
    #codeCoverageToolOption: 'None' # Optional. Options: none, cobertura, jaCoCo
    #codeCoverageClassFilesDirectories: 'build/classes/main/' # Required when codeCoverageToolOption == False
    #codeCoverageClassFilter: # Optional
    #codeCoverageFailIfEmpty: false # Optional
    #javaHomeOption: 'JDKVersion' # Options: jDKVersion, path
    #jdkVersionOption: 'default' # Optional. Options: default, 1.11, 1.10, 1.9, 1.8, 1.7, 1.6
    #jdkDirectory: # Required when javaHomeOption == Path
    #jdkArchitectureOption: 'x64' # Optional. Options: x86, x64
    #gradleOptions: '-Xmx1024m' # Optional
    #sonarQubeRunAnalysis: false
    #sqGradlePluginVersionChoice: 'specify' # Required when sonarQubeRunAnalysis == True# Options: specify, build
    #sonarQubeGradlePluginVersion: '2.6.1' # Required when sonarQubeRunAnalysis == True && SqGradlePluginVersionChoice == Specify
    #checkStyleRunAnalysis: false # Optional
    #findBugsRunAnalysis: false # Optional
    #pmdRunAnalysis: false # Optionalnpm run unit -- Runs all tests and closes
  displayName: Build API with Gradle
- task: Npm@1
  inputs:
    command: 'run unit'
    workingDir: '$(Build.SourcesDirectory)/ui'
  displayName: Run Front End Unit Tests
- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(Build.SourcesDirectory)/ui'
  displayName: NPM install front end
#- task: Docker@1
#  displayName: Container registry login
#  inputs:
#    command: login
#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureContainerRegistry: $(azureContainerRegistry)
#- task: Docker@1
#  displayName: Run image
#  inputs:
#    command: run
#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureContainerRegistry: $(azureContainerRegistry)
#    imageName: retroazure:latest
# - script: docker login -u $(dockerId) -p $(pswd) bkcontainer.azurecr.io
# - script: docker run -e 'USER_LOGIN=$(USER_LOGIN)' bkcontainer.azurecr.io/retroazure/retroazure
#   displayName: 'docker build and run'
