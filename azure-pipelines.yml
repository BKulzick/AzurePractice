# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript -v $PWD:/opt

trigger:
- master
- develop

pool:
  vmImage: 'Ubuntu-16.04'
variables:
    azureSubscriptionEndpoint: retroazure
    azureContainerRegistry: bkcontainer.azurecr.io
steps:
- task: Gradle@2
  inputs:
    gradleWrapperFile: 'gradlew'
    workingDirectory: $(Build.SourcesDirectory)/api/
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml' # Required when publishJUnitResults == True
  displayName: Build API with Gradle
- script: ./gradlew bootRun
  workingDirectory: $(Build.SourcesDirectory)/api/
  displayName: Start API
- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(Build.SourcesDirectory)/ui'
  displayName: NPM install front end
- script: npm run unit
  workingDirectory: '$(Build.SourcesDirectory)/ui'
  displayName: Run Front End Unit Tests
- script: npm run start
  workingDirectory: '$(Build.SourcesDirectory)/ui'
  displayName: Start Front End
- script: npm run e2e
  workingDirectory: '$(Build.SourcesDirectory)/ui'
  displayName: Run End 2 End Test
#- task: Docker@1
#  displayName: Container registry login
#  inputs:
#    command: login
#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureContainerRegistry: $(azureContainerRegistry)
#- task: Docker@1
#  displayName: Run image
#  inputs:
#    command: run
#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureContainerRegistry: $(azureContainerRegistry)
#    imageName: retroazure:latest
# - script: docker login -u $(dockerId) -p $(pswd) bkcontainer.azurecr.io
# - script: docker run -e 'USER_LOGIN=$(USER_LOGIN)' bkcontainer.azurecr.io/retroazure/retroazure
#   displayName: 'docker build and run'
